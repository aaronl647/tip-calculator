{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","total","service","partySize","totalTip","tipPP","afterTip","handleTotal","event","setState","target","value","handleService","handleParty","genTip","preventDefault","tip","parseFloat","toFixed","totalTipPP","afterTipTotal","className","onSubmit","this","type","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAGqBA,G,kNACnBC,MAAQ,CACNC,MAAO,GACPC,QAAS,GACTC,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,SAAU,I,EAGZC,YAAc,SAACC,GACb,EAAKC,SAAS,CACZR,MAAOO,EAAME,OAAOC,S,EAIxBC,cAAgB,SAACJ,GACf,EAAKC,SAAS,CACZP,QAASM,EAAME,OAAOC,S,EAG1BE,YAAc,SAACL,GACb,EAAKC,SAAS,CACZN,UAAWK,EAAME,OAAOC,S,EAI5BG,OAAS,SAACN,GACRA,EAAMO,iBACN,IAAIC,EAAMC,WAAW,EAAKjB,MAAMC,OAAS,EAAKD,MAAME,QAAU,MAAMgB,QAClE,GAEEC,EAAaF,WAAWD,EAAM,EAAKhB,MAAMG,WAAWe,QAAQ,GAC5DE,EAAgBH,WAClB,EAAKjB,MAAMC,MAAQ,EAAKD,MAAMG,UAAYgB,GAC1CD,QAAQ,GACV,EAAKT,SAAS,CACZL,SAAUY,EACVX,MAAOc,EACPb,SAAUc,K,uDAKZ,OACE,yBAAKC,UAAU,OACb,8CACA,6BACE,0BAAMC,SAAUC,KAAKT,QACnB,yBAAKO,UAAU,WACf,6CAEE,2BACEG,KAAK,OACLb,MAAOY,KAAKvB,MAAMC,MAClBwB,SAAUF,KAAKhB,eAGnB,0CAEE,2BACEiB,KAAK,OACLb,MAAOY,KAAKvB,MAAME,QAClBuB,SAAUF,KAAKX,iBAGnB,6CAEE,2BACEY,KAAK,OACLb,MAAOY,KAAKvB,MAAMG,UAClBsB,SAAUF,KAAKV,gBAInB,6BACA,2BAAOW,KAAK,YAEd,6BACA,qCAAWD,KAAKvB,MAAMI,UACtB,4CAAkBmB,KAAKvB,MAAMK,OAC7B,kDAAwBkB,KAAKvB,MAAMM,e,GAjFZoB,cCSbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0e9b4cf2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nexport default class App extends Component {\n  state = {\n    total: \"\",\n    service: \"\",\n    partySize: \"\",\n    totalTip: \"\",\n    tipPP: \"\",\n    afterTip: \"\",\n  };\n\n  handleTotal = (event) => {\n    this.setState({\n      total: event.target.value,\n    });\n  };\n\n  handleService = (event) => {\n    this.setState({\n      service: event.target.value,\n    });\n  };\n  handleParty = (event) => {\n    this.setState({\n      partySize: event.target.value,\n    });\n  };\n\n  genTip = (event) => {\n    event.preventDefault();\n    let tip = parseFloat(this.state.total * (this.state.service / 100)).toFixed(\n      2\n    );\n    let totalTipPP = parseFloat(tip / this.state.partySize).toFixed(2);\n    let afterTipTotal = parseFloat(\n      this.state.total / this.state.partySize + totalTipPP\n    ).toFixed(2);\n    this.setState({\n      totalTip: tip,\n      tipPP: totalTipPP,\n      afterTip: afterTipTotal,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Tip Calculator</h1>\n        <br/>\n          <form onSubmit={this.genTip}>\n            <div className='content'>\n            <label>\n              Bill Total:\n              <input\n                type=\"text\"\n                value={this.state.total}\n                onChange={this.handleTotal}\n              />\n            </label>\n            <label>\n              Service:\n              <input\n                type=\"text\"\n                value={this.state.service}\n                onChange={this.handleService}\n              />\n            </label>\n            <label>\n              Party Size:\n              <input\n                type=\"text\"\n                value={this.state.partySize}\n                onChange={this.handleParty}\n              />\n            </label>\n            </div>\n            <br/>\n            <input type=\"submit\" />\n          </form>\n          <br/>\n          <h4>Tip: ${this.state.totalTip}</h4>\n          <h4>Per Person: ${this.state.tipPP}</h4>\n          <h4>Each Person Pays: ${this.state.afterTip}</h4>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}